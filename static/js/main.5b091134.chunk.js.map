{"version":3,"sources":["Converter/Converter.js","App.js","serviceWorker.js","index.js"],"names":["SelectM","React","memo","_ref","name","options","currentValue","onChange","restProps","Object","objectWithoutProperties","react_default","a","createElement","assign","value","map","option","i","key","Converter","state","amount","result","fromCurrency","toCurrency","currencies","converting","_this","setState","loading","fetch","concat","then","res","json","rates","toFixed","catch","error","console","log","message","e","defineProperty","target","switchCurrencies","_this$state","onSubmit","preventDefault","_this2","this","_ref2","base","curArr","keys","sort","_this$state2","className","type","min","required","onClick","Component","App","src_Converter_Converter","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5b091134.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Converter.css\";\r\n\r\n// N.B.: https://reactjs.org/docs/react-api.html#reactmemo\r\nconst SelectM = React.memo(function Select({\r\n  name,\r\n  options,\r\n  currentValue,\r\n  onChange,\r\n  ...restProps\r\n}) {\r\n  return (\r\n    <select\r\n      name={name}\r\n      value={currentValue}\r\n      onChange={onChange}\r\n      {...restProps}\r\n    >\r\n      {options.map((option, i) => {\r\n        return <option key={i}>{option}</option>;\r\n      })}\r\n    </select>\r\n  );\r\n});\r\n\r\nclass Converter extends Component {\r\n  state = {\r\n    amount: null,\r\n    result: null,\r\n    fromCurrency: \"USD\",\r\n    toCurrency: \"RUB\",\r\n    currencies: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    fetch(`https://api.openrates.io/latest`)\r\n      .then(res => res.json())\r\n      .then(({ rates, base }) => {\r\n        const curArr = Object.keys(rates)\r\n          .concat(base)\r\n          .sort();\r\n        this.setState({ currencies: curArr });\r\n      })\r\n      .catch(error => console.log(\"Opps\", error.message));\r\n  }\r\n\r\n  converting = () => {\r\n    this.setState({ loading: true });\r\n    fetch(\r\n      `https://api.openrates.io/latest?base=${\r\n        this.state.fromCurrency\r\n      }&symbols=${this.state.toCurrency}`\r\n    )\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        this.setState({ loading: false });\r\n        const result = this.state.amount * res.rates[this.state.toCurrency];\r\n        this.setState({ result: result.toFixed(2) });\r\n      })\r\n      .catch(error => {\r\n        this.setState({ loading: false });\r\n        console.log(\"Opps\", error.message);\r\n      });\r\n  };\r\n\r\n  onChange = e => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n  switchCurrencies = () => {\r\n    const { toCurrency, fromCurrency } = this.state;\r\n    this.setState({\r\n      fromCurrency: toCurrency,\r\n      toCurrency: fromCurrency\r\n    });\r\n  };\r\n  onSubmit = e => {\r\n    e.preventDefault();\r\n    this.converting();\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      currencies,\r\n      toCurrency,\r\n      fromCurrency,\r\n      result,\r\n      loading\r\n    } = this.state;\r\n    return (\r\n      <div className=\"Converter\">\r\n        <h2>Currency Converter</h2>\r\n        <form className=\"Form\" onSubmit={this.onSubmit}>\r\n          <input\r\n            name=\"amount\"\r\n            type=\"number\"\r\n            onChange={this.onChange}\r\n            min=\"1\"\r\n            required\r\n          />\r\n          <SelectM\r\n            name=\"fromCurrency\"\r\n            currentValue={fromCurrency}\r\n            onChange={this.onChange}\r\n            options={currencies}\r\n          />\r\n          <span className=\"switch\" onClick={this.switchCurrencies}>\r\n            {\"<-->\"}\r\n          </span>\r\n          <SelectM\r\n            name=\"toCurrency\"\r\n            currentValue={toCurrency}\r\n            onChange={this.onChange}\r\n            options={currencies}\r\n          />\r\n          <button type=\"submit\">Convert</button>\r\n        </form>\r\n        {loading ? <h3>.....loading.....</h3> : <h3>{result}</h3>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Converter;\r\n","import React from 'react';\nimport './App.css';\nimport Converter from './Converter/Converter.js';\n\nfunction App() {\n  return (\n    <Converter/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}