{"version":3,"sources":["Converter/Converter.js","App.js","serviceWorker.js","index.js"],"names":["Converter","state","amount","fromCurrency","toCurrency","result","curriences","converting","fetch","concat","_this","then","res","json","rates","setState","toFixed","catch","error","console","log","message","_this2","this","curArr","key","push","base","sort","_this3","react_default","a","createElement","className","name","type","onChange","e","target","value","min","required","map","cur","onClick","preventDefault","Component","App","src_Converter_Converter","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sRAyDeA,oNArDXC,MAAQ,CACRC,OAAQ,KACRC,aAAc,MACdC,WAAY,MACZC,OAAQ,KACRC,WAAY,MAkBZC,WAAa,WACTC,MAAK,wCAAAC,OAAyCC,EAAKT,MAAME,aAApD,aAAAM,OAA4EC,EAAKT,MAAMG,aACvFO,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAC,GACF,IAAMP,EAASK,EAAKT,MAAMC,OAAUU,EAAIE,MAAMJ,EAAKT,MAAMG,YACzDM,EAAKK,SAAS,CAAEV,OAAQA,EAAOW,QAAQ,OAE1CC,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,OAAQF,EAAMG,+FAtB9B,IAAAC,EAAAC,KACpBf,MAAM,mCACDG,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAC,GACF,IAAMY,EAAS,GACf,IAAK,IAAMC,KAAOb,EAAIE,MACtBU,EAAOE,KAAKD,GAEZD,EAAOE,KAAKd,EAAIe,MAChBH,EAAOI,OACPN,EAAKP,SAAS,CAAET,WAAYkB,MAE/BP,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,OAAQF,EAAMG,4CAarC,IAAAQ,EAAAN,KACL,OACIO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QACZH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,SAASC,KAAK,SAASC,SAAU,SAACC,GAAD,OAAOR,EAAKd,SAAS,CAAEb,OAAQmC,EAAEC,OAAOC,SAAWC,IAAI,IAAIC,UAAQ,IAChHX,EAAAC,EAAAC,cAAA,UAAQE,KAAK,UAAUE,SAAU,SAACC,GAAD,OAAOR,EAAKd,SAAS,CAAEZ,aAAckC,EAAEC,OAAOC,UAC9EhB,KAAKtB,MAAMK,WAAWoC,IAAI,SAACC,GAAS,OAAOb,EAAAC,EAAAC,cAAA,UAAQP,IAAG,OAAAhB,OAASkC,IAAQA,MAExEb,EAAAC,EAAAC,cAAA,UAAQE,KAAK,QAAQE,SAAU,SAACC,GAAD,OAAOR,EAAKd,SAAS,CAAEX,WAAYiC,EAAEC,OAAOC,UAC1EhB,KAAKtB,MAAMK,WAAWoC,IAAI,SAACC,GAAS,OAAOb,EAAAC,EAAAC,cAAA,UAAQP,IAAG,KAAAhB,OAAOkC,IAAQA,MAEtEb,EAAAC,EAAAC,cAAA,UAAQY,QAAS,SAACP,GAAOA,EAAEQ,iBAAkBhB,EAAKtB,eAAlD,YAEJuB,EAAAC,EAAAC,cAAA,UAAKT,KAAKtB,MAAMI,gBAhDRyC,cCOTC,MANf,WACE,OACEjB,EAAAC,EAAAC,cAACgB,EAAD,OCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlD,KAAK,SAAAmD,GACjCA,EAAaC","file":"static/js/main.a26deae1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport './Converter.css';\r\n\r\nclass Converter extends Component {\r\n    state = {\r\n    amount: null,    \r\n    fromCurrency: 'AUD', \r\n    toCurrency: 'AUD',\r\n    result: null,\r\n    curriences: []\r\n    }\r\n\r\n    componentDidMount() { \r\n    fetch('https://api.openrates.io/latest')\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            const curArr = [];\r\n            for (const key in res.rates) {\r\n            curArr.push(key);\r\n            }\r\n            curArr.push(res.base);\r\n            curArr.sort();\r\n            this.setState({ curriences: curArr })\r\n        })\r\n        .catch(error => console.log(\"Opps\", error.message))     \r\n    } \r\n\r\n    converting = () => {\r\n        fetch(`https://api.openrates.io/latest?base=${this.state.fromCurrency}&symbols=${this.state.toCurrency}`)    \r\n            .then(res => res.json())\r\n            .then(res => {\r\n                const result = this.state.amount * (res.rates[this.state.toCurrency]);\r\n                this.setState({ result: result.toFixed(2) })\r\n            })\r\n            .catch(error => console.log(\"Opps\", error.message))\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Converter\">\r\n                <h2>Currency Converter</h2>\r\n                <form className=\"Form\">\r\n                    <input name='amount' type='number' onChange={(e) => this.setState({ amount: e.target.value }) } min=\"1\" required/>\r\n                    <select name='fromCur' onChange={(e) => this.setState({ fromCurrency: e.target.value }) }>\r\n                    {this.state.curriences.map((cur) => {return <option key={`from${cur}`}>{cur}</option>})}\r\n                    </select>\r\n                    <select name='toCur' onChange={(e) => this.setState({ toCurrency: e.target.value }) }>\r\n                    {this.state.curriences.map((cur) => {return <option key={`to${cur}`}>{cur}</option>})}\r\n                    </select>\r\n                    <button onClick={(e) => {e.preventDefault(); this.converting()}}>Convert</button>\r\n                </form>\r\n                <h3>{this.state.result}</h3>                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Converter;","import React from 'react';\nimport './App.css';\nimport Converter from './Converter/Converter.js';\n\nfunction App() {\n  return (\n    <Converter/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}